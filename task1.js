// 04//09/2023
// 1-день. Новые темы: методы Sort, Slice, new Set, spread...,компаратор(Функция сравнение)
// Методы Set и Sort

// function twoHighest(arr) {
//   return [...new Set(arr)].sort((a, b) => b - a).slice(0, 2)
// }
// console.log(twoHighest([1,2,3,4,4,5]));

// Данный код представляет собой JavaScript-функцию под названием twoHighest, которая принимает один аргумент arr,
//  который, предположительно, является массивом чисел. Эта функция выполняет следующие действия:
// [...new Set(arr)]: Этот код используется для удаления дубликатов из массива arr с помощью Set,
//  который автоматически удаляет дубликаты. Затем ... (spread оператор) используется для преобразования 
// уникальных значений обратно в массив.
// .sort((a, b) => b - a): Затем массив с уникальными значениями сортируется в убывающем порядке. 
// Это означает, что наибольшие числа будут находиться в начале массива.
// .slice(0, 2): Наконец, используется метод slice для выбора первых двух элементов из отсортированного массива. Это означает, 
// что мы получаем два наибольших уникальных числа из исходного массива.
// Таким образом, функция twoHighest возвращает массив, содержащий два наибольших уникальных числа из исходного массива arr.

// let arr = [1,2,3,4,5,6,6]
// function giveHigh(array){
//     return [...new Set(array)].sort((a,b)=>b-a).slice(0,2)
// }

// console.log(giveHigh(arr));

// [...new Set(arr)]:
// Set - это встроенный объект в JavaScript, представляющий собой коллекцию уникальных значений. 
// Он автоматически удаляет дубликаты.
// new Set(arr) создает новый экземпляр Set, исходя из массива arr.
// [...] - это оператор расширения (spread operator). Он используется для преобразования элементов Set обратно
//  в массив. В результате получается массив, который содержит только уникальные элементы из исходного массива arr.

// .sort((a, b) => b - a):
// .sort() - это метод массива, который используется для сортировки элементов массива в месте.
//  В данном случае, массив, который был получен после удаления дубликатов и преобразования, сортируется.
// (a, b) => b - a - это функция сравнения (компаратор), которая используется для определения порядка сортировки. 
// Она принимает два аргумента a и b (элементы массива) и возвращает разницу между ними (b - a). 
// Если разница положительная, то b будет расположено перед a в отсортированном массиве, 
// что приводит к убывающему порядку сортировки. Если разница отрицательная или ноль, порядок остается неизменным.

// .slice(0, 2):
// .slice() - это метод массива, который используется для извлечения части массива и создания нового массива 
// на основе этой части.
// 0 и 2 - это аргументы метода .slice(). 0 указывает начальный индекс,
//  с которого начинается извлечение, а 2 указывает конечный индекс, до которого извлекаются элементы.
//  В данном случае, извлекаются первые два элемента отсортированного массива, 
// что соответствует двум наибольшим уникальным числам.
// Таким образом, в результате выполнения всех этих операций, функция twoHighest возвращает массив, 
// содержащий два наибольших уникальных числа из исходного массива arr.

// let arr2 = [1,2,3,4,5,5,6]
// function sort(array){
//     return [...new Set(array)].sort((a,b)=>b-a)
// }

// console.log(sort(arr2));

// Компаратор (или функция сравнения) в JavaScript - это функция, которая используется для определения порядка
//  сортировки элементов в массиве или другой коллекции данных. 
// Когда вы сортируете массив, JavaScript вызывает вашу функцию сравнения для сравнения двух элементов массива
//  и решения, какой из них должен идти первым в отсортированном массиве.
// Функция сравнения должна принимать два аргумента (обычно обозначаемых как a и b) и возвращать одно из трех
//  возможных значений:
// Отрицательное число: Если функция возвращает отрицательное число (например, -1), это означает,
//  что a должно идти перед b в отсортированном массиве.

// Нуль: Если функция возвращает нуль, это означает, что порядок a и b не важен, и они считаются равными с точки зрения сортировки.

// Положительное число: Если функция возвращает положительное число (например, 1), это означает, что b должно идти перед a в отсортированном массиве.



// 05//09/2023
// 2-день. Новые темы:  методы Replace, test, регулярные выражения( /^\d{4}$|^\d{6}$/
// ), функция генератор


// let myStr="Khamzat"
// const func=(str)=>{
//     return str.replace(/a/g,"o")
// }

// console.log(func(myStr));
// Объяснение:
// Метод replace() в JavaScript предназначен для замены подстроки в строке новой подстрокой. 
// Он позволяет вам выполнить замену одного или всех вхождений подстроки в исходной строке.
// синтаксис метода
//  replace():string.replace(searchValue, replaceValue);
// string: Исходная строка, в которой вы хотите выполнить замену.
// searchValue: Подстрока, которую вы хотите найти и заменить. Может быть как строкой, так и регулярным выражением.
// replaceValue: Подстрока, которой вы хотите заменить найденную подстроку.
// Некоторые выражения требуют экранирования \

// Метод test() и регулярное выражение:/^\d{4}$|^\d{6}$/
// Задачка с CodeWars 

// function validatePIN (pin) {
//  return /^(\d{4}|\d{6})$/.test(pin);
// }

//   Объяснение:
// /^\d{4}$|^\d{6}$/ - это регулярное выражение, используемое для проверки формата PIN-кода.
// ^ - это символ начала строки. Он указывает, что совпадение должно начинаться с начала строки.
// \d - это шаблон, который соответствует любой цифре (0-9).
// {4} - это квантификатор, который указывает, что предыдущий шаблон \d должен повторяться ровно 4 раза.
//  То есть это означает, что в строке должно быть ровно 4 цифры.
// $ - это символ конца строки. Он указывает, что совпадение должно заканчиваться в конце строки.
// | - это оператор "или" в регулярных выражениях, который позволяет проверить два условия: 
// либо 4 цифры, либо 6 цифр.
// Итак, выражение /^\d{4}$|^\d{6}$/ означает следующее:
// Строка должна начинаться с 4 цифр и заканчиваться 4 цифрами (то есть быть длиной 4 символа), или
// Строка должна начинаться с 6 цифр и заканчиваться 6 цифрами (то есть быть длиной 6 символов).
// Если входная строка удовлетворяет одному из этих условий, то .test(pin) вернет true, что означает,
//  что входной PIN-код является допустимым. В противном случае, если ни одно из условий не выполняется,
//  она вернет false, что означает, что PIN-код недопустимый.

// Метод .test() является методом JavaScript для регулярных выражений. 
// Он используется для проверки, соответствует ли строка заданному регулярному выражению или нет.
//  Возвращаемое значение метода .test() - это булевое значение true или false, которое показывает,
//  было ли совпадение в строке с регулярным выражением.

// let pinCode = 1234
// let falseCode = 12345
// let sixLength = 123456

// const valid = (pin)=>{
//     return /^(\d{4}|\d{6})$/.test(pin)
// }
// console.log(valid(sixLength));

// Обычно, когда вы что-то покупаете, вас спрашивают, верны ли по-прежнему номер вашей кредитной карты,
//  номер телефона или ответ на ваш самый секретный вопрос.
//  Однако, поскольку кто-то может заглянуть вам через плечо, вы не хотите, чтобы это отображалось на вашем экране.
//  Вместо этого мы маскируем это.

// Ваша задача состоит в том, чтобы написать функцию maxify, которая изменяет все символы, кроме последних четырех,
//  на '#'.
// return masked string
// function maskify(cc) {
//     return cc.slice(0, -4).replace(/./g, '#') + cc.slice(-4);
//     }

// функция-генератор 

// function* addNums(num1, num2){
//   for(let i = num1;i<=num2;i++){
//     if(i%2==0){
//       yield i
//     }
//   }
// }

// const generator = addNums(10,20)
// for(let num of generator){
//   console.log(num)
// }

// Мы объявляем функцию-генератор addNums с двумя параметрами num1 и num2.
//  Эта функция будет создавать генератор, который генерирует четные числа в заданном диапазоне от num1 до num2.
// Внутри функции-генератора есть цикл for, который перебирает числа от num1 до num2. 
// В каждой итерации цикла мы проверяем, является ли текущее число i четным с помощью операции % 
// (остаток от деления на 2).
// Если текущее число i четное, мы используем оператор yield, чтобы вернуть его значение. 
// Это приостанавливает выполнение функции и возвращает значение i наружу.
// Мы создаем генератор, вызывая функцию addNums с аргументами 10 и 20,
//  что означает, что мы хотим получить все четные числа в диапазоне от 10 до 20.
// Затем мы используем цикл for...of, чтобы итерироваться по генератору. 
// В каждой итерации цикла мы получаем следующее четное число из генератора и выводим его в консоль.
// Итак, результат выполнения этого кода будет вывод всех четных чисел в диапазоне от 10 до 20 в консоль.

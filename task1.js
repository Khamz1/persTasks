// 04//09/2023
// 1-день. Новые темы: методы Sort, Slice, new Set, spread...,компаратор(Функция сравнение)
// Методы Set и Sort

// function twoHighest(arr) {
//   return [...new Set(arr)].sort((a, b) => b - a).slice(0, 2)
// }
// console.log(twoHighest([1,2,3,4,4,5]));

// Данный код представляет собой JavaScript-функцию под названием twoHighest, которая принимает один аргумент arr,
//  который, предположительно, является массивом чисел. Эта функция выполняет следующие действия:
// [...new Set(arr)]: Этот код используется для удаления дубликатов из массива arr с помощью Set,
//  который автоматически удаляет дубликаты. Затем ... (spread оператор) используется для преобразования 
// уникальных значений обратно в массив.
// .sort((a, b) => b - a): Затем массив с уникальными значениями сортируется в убывающем порядке. 
// Это означает, что наибольшие числа будут находиться в начале массива.
// .slice(0, 2): Наконец, используется метод slice для выбора первых двух элементов из отсортированного массива. Это означает, 
// что мы получаем два наибольших уникальных числа из исходного массива.
// Таким образом, функция twoHighest возвращает массив, содержащий два наибольших уникальных числа из исходного массива arr.

// let arr = [1,2,3,4,5,6,6]
// function giveHigh(array){
//     return [...new Set(array)].sort((a,b)=>b-a).slice(0,2)
// }

// console.log(giveHigh(arr));

// [...new Set(arr)]:
// Set - это встроенный объект в JavaScript, представляющий собой коллекцию уникальных значений. 
// Он автоматически удаляет дубликаты.
// new Set(arr) создает новый экземпляр Set, исходя из массива arr.
// [...] - это оператор расширения (spread operator). Он используется для преобразования элементов Set обратно
//  в массив. В результате получается массив, который содержит только уникальные элементы из исходного массива arr.

// .sort((a, b) => b - a):
// .sort() - это метод массива, который используется для сортировки элементов массива в месте.
//  В данном случае, массив, который был получен после удаления дубликатов и преобразования, сортируется.
// (a, b) => b - a - это функция сравнения (компаратор), которая используется для определения порядка сортировки. 
// Она принимает два аргумента a и b (элементы массива) и возвращает разницу между ними (b - a). 
// Если разница положительная, то b будет расположено перед a в отсортированном массиве, 
// что приводит к убывающему порядку сортировки. Если разница отрицательная или ноль, порядок остается неизменным.

// .slice(0, 2):
// .slice() - это метод массива, который используется для извлечения части массива и создания нового массива 
// на основе этой части.
// 0 и 2 - это аргументы метода .slice(). 0 указывает начальный индекс,
//  с которого начинается извлечение, а 2 указывает конечный индекс, до которого извлекаются элементы.
//  В данном случае, извлекаются первые два элемента отсортированного массива, 
// что соответствует двум наибольшим уникальным числам.
// Таким образом, в результате выполнения всех этих операций, функция twoHighest возвращает массив, 
// содержащий два наибольших уникальных числа из исходного массива arr.

// let arr2 = [1,2,3,4,5,5,6]
// function sort(array){
//     return [...new Set(array)].sort((a,b)=>b-a)
// }

// console.log(sort(arr2));

// Компаратор (или функция сравнения) в JavaScript - это функция, которая используется для определения порядка
//  сортировки элементов в массиве или другой коллекции данных. 
// Когда вы сортируете массив, JavaScript вызывает вашу функцию сравнения для сравнения двух элементов массива
//  и решения, какой из них должен идти первым в отсортированном массиве.
// Функция сравнения должна принимать два аргумента (обычно обозначаемых как a и b) и возвращать одно из трех
//  возможных значений:
// Отрицательное число: Если функция возвращает отрицательное число (например, -1), это означает,
//  что a должно идти перед b в отсортированном массиве.

// Нуль: Если функция возвращает нуль, это означает, что порядок a и b не важен, и они считаются равными с точки зрения сортировки.

// Положительное число: Если функция возвращает положительное число (например, 1), это означает, что b должно идти перед a в отсортированном массиве.